version: '1.0'
name: master-pipeline
displayName: MasterPipeline
stages:
  - stage: 
    name: compile
    displayName: 编译
    steps:
      - step: build@maven
        name: build_maven
        displayName: Maven 构建
        # 支持6、7、8、9、10、11六个版本
        jdkVersion: 8
        # 支持2.2.1、3.2.5、3.3.9、3.5.2、3.5.3、3.5.4、3.6.1、3.6.3八个版本
        mavenVersion: 3.3.9
        # 构建命令
        commands:
          - mvn -B clean package -Dmaven.test.skip=true
        # 非必填字段，开启后表示将构建产物暂存，但不会上传到制品库中，7天后自动清除
        artifacts:
            # 构建产物名字，作为产物的唯一标识可向下传递，支持自定义，默认为BUILD_ARTIFACT。在下游可以通过${BUILD_ARTIFACT}方式引用来获取构建物地址
          - name: BUILD_ARTIFACT
            # 构建产物获取路径，是指代码编译完毕之后构建物的所在路径，如通常jar包在target目录下。当前目录为代码库根目录
            path:
              - ./target
      - step: publish@general_artifacts
        name: publish_general_artifacts
        displayName: 上传制品
        # 上游构建任务定义的产物名，默认BUILD_ARTIFACT
        dependArtifact: BUILD_ARTIFACT
        # 构建产物制品库，默认default，系统默认创建
        artifactRepository: default
        # 上传到制品库时的制品命名，默认build
        artifactName: output  
        dependsOn: build_maven
  - stage: 
    name: release
    displayName: 发布
    steps:
      - step: publish@release_artifacts
        name: publish_release_artifacts
        displayName: '发布'
        # 上游上传制品任务的产出
        dependArtifact: output
        # 发行版制品库，默认release，系统默认创建
        artifactRepository: release
        # 发布制品版本号
        version: '1.0.0.0'
        # 是否开启版本号自增，默认开启
        autoIncrement: true
  - stage: 
    name: deploy
    displayName: 部署
    steps:
      - step: deploy@agent
        name: deploy_agent
        displayName: '主机部署'
        hostGroupID: springboot
        deployArtifact:
            # 部署包来源，build表示来源于上游流水线，artifact表示来源于制品仓库，推荐使用build
          - source: artifact
            # 将部署包下载到主机后的部署包名，默认output
            name: output
            # 将部署包下载主机的具体目录，默认 ~/gitee_go/deoloy
            target: /www/projects/template
            # 上游制品名，只有当source为build时生效，默认output
            dependArtifact: output
            # 以下内容只有在source为artifact时生效，制品库名，默认default
            artifactRepository: release
            # 制品名，默认output
            artifactName: output
            # 制品版本，默认取最新
            artifactVersion: latest
        script: 
          |
          cd /www/projects/template
          ls
          temp=`lsof -ti:8080`
          if [ $temp ];
          then
          kill -9 $temp
          echo $temp
          tar -zxf output.tar.gz
          cd target
          nohup java -jar template-0.0.1-SNAPSHOT.jar --server.port=8080 & 
          echo "Deploy Success"
          sleep 30
          curl 127.0.0.1:8080
triggers:
  push:
    branches:
      include:
        - master
